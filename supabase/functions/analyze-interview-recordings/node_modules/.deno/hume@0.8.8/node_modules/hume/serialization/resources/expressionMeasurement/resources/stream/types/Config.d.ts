/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from "../../../../../index";
import * as Hume from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { StreamModelsEndpointPayloadModelsFace } from "./StreamModelsEndpointPayloadModelsFace";
import { StreamModelsEndpointPayloadModelsLanguage } from "./StreamModelsEndpointPayloadModelsLanguage";
export declare const Config: core.serialization.ObjectSchema<serializers.expressionMeasurement.Config.Raw, Hume.expressionMeasurement.Config>;
export declare namespace Config {
    interface Raw {
        burst?: Record<string, unknown> | null;
        face?: StreamModelsEndpointPayloadModelsFace.Raw | null;
        facemesh?: Record<string, unknown> | null;
        language?: StreamModelsEndpointPayloadModelsLanguage.Raw | null;
        prosody?: Record<string, unknown> | null;
    }
}
