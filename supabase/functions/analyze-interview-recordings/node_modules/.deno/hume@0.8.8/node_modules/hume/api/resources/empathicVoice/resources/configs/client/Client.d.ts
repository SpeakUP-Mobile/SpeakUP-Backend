/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
export declare namespace Configs {
    interface Options {
        environment?: core.Supplier<environments.HumeEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Configs {
    protected readonly _options: Configs.Options;
    constructor(_options?: Configs.Options);
    /**
     * @param {Hume.empathicVoice.ConfigsListConfigsRequest} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.listConfigs({
     *         pageNumber: 0,
     *         pageSize: 1
     *     })
     */
    listConfigs(request?: Hume.empathicVoice.ConfigsListConfigsRequest, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnPagedConfigs>;
    /**
     * @param {Hume.empathicVoice.PostedConfig} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.createConfig({
     *         name: "Weather Assistant Config",
     *         prompt: {
     *             id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
     *             version: 0
     *         },
     *         voice: {
     *             provider: "HUME_AI",
     *             name: Hume.empathicVoice.PostedVoiceName.Kora
     *         },
     *         languageModel: {
     *             modelProvider: Hume.empathicVoice.PostedLanguageModelModelProvider.Anthropic,
     *             modelResource: "claude-3-5-sonnet-20240620",
     *             temperature: 1
     *         },
     *         eventMessages: {
     *             onNewChat: {
     *                 enabled: false,
     *                 text: ""
     *             },
     *             onInactivityTimeout: {
     *                 enabled: false,
     *                 text: ""
     *             },
     *             onMaxDurationTimeout: {
     *                 enabled: false,
     *                 text: ""
     *             }
     *         }
     *     })
     */
    createConfig(request: Hume.empathicVoice.PostedConfig, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnConfig>;
    /**
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {Hume.empathicVoice.ConfigsListConfigVersionsRequest} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.listConfigVersions("1b60e1a0-cc59-424a-8d2c-189d354db3f3")
     */
    listConfigVersions(id: string, request?: Hume.empathicVoice.ConfigsListConfigVersionsRequest, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnPagedConfigs>;
    /**
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedConfigVersion} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.createConfigVersion("1b60e1a0-cc59-424a-8d2c-189d354db3f3", {
     *         versionDescription: "This is an updated version of the Weather Assistant Config.",
     *         prompt: {
     *             id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
     *             version: 0
     *         },
     *         voice: {
     *             provider: "HUME_AI",
     *             name: Hume.empathicVoice.PostedVoiceName.Ito
     *         },
     *         languageModel: {
     *             modelProvider: Hume.empathicVoice.PostedLanguageModelModelProvider.Anthropic,
     *             modelResource: "claude-3-5-sonnet-20240620",
     *             temperature: 1
     *         },
     *         ellmModel: {
     *             allowShortResponses: true
     *         },
     *         eventMessages: {
     *             onNewChat: {
     *                 enabled: false,
     *                 text: ""
     *             },
     *             onInactivityTimeout: {
     *                 enabled: false,
     *                 text: ""
     *             },
     *             onMaxDurationTimeout: {
     *                 enabled: false,
     *                 text: ""
     *             }
     *         }
     *     })
     */
    createConfigVersion(id: string, request?: Hume.empathicVoice.PostedConfigVersion, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnConfig>;
    /**
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.deleteConfig("1b60e1a0-cc59-424a-8d2c-189d354db3f3")
     */
    deleteConfig(id: string, requestOptions?: Configs.RequestOptions): Promise<void>;
    /**
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedConfigName} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.updateConfigName("1b60e1a0-cc59-424a-8d2c-189d354db3f3", {
     *         name: "Updated Weather Assistant Config Name"
     *     })
     */
    updateConfigName(id: string, request: Hume.empathicVoice.PostedConfigName, requestOptions?: Configs.RequestOptions): Promise<string>;
    /**
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {number} version - Version number for a Config.
     *
     *                           Configs, as well as Prompts and Tools, are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number.
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.getConfigVersion("1b60e1a0-cc59-424a-8d2c-189d354db3f3", 1)
     */
    getConfigVersion(id: string, version: number, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnConfig>;
    /**
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {number} version - Version number for a Config.
     *
     *                           Configs, as well as Prompts and Tools, are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number.
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.deleteConfigVersion("1b60e1a0-cc59-424a-8d2c-189d354db3f3", 1)
     */
    deleteConfigVersion(id: string, version: number, requestOptions?: Configs.RequestOptions): Promise<void>;
    /**
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {number} version - Version number for a Config.
     *
     *                           Configs, as well as Prompts and Tools, are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number.
     * @param {Hume.empathicVoice.PostedConfigVersionDescription} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.updateConfigDescription("1b60e1a0-cc59-424a-8d2c-189d354db3f3", 1, {
     *         versionDescription: "This is an updated version_description."
     *     })
     */
    updateConfigDescription(id: string, version: number, request?: Hume.empathicVoice.PostedConfigVersionDescription, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnConfig>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-Hume-Api-Key": string | undefined;
    }>;
}
